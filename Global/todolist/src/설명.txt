if (inputValue.trim() !== ''): 입력값이 공백이 아닌지 확인합니다. inputValue는 사용자가 입력한 값이며, .trim() 메서드를 사용하여 양쪽의 공백을 제거한 후 공백이 아닌지 확인합니다. 값이 공백인 경우에는 할 일을 추가하지 않습니다.

const isDuplicate = todos.some((todo) => todo.text === inputValue): isDuplicate 변수를 선언하고, 이미 추가된 할 일과 현재 입력값을 비교하여 중복 여부를 확인합니다. todos 배열의 각 할 일 객체(todo)의 text 속성과 현재 입력값(inputValue)을 비교하여 중복된 값이 있는지 확인합니다.

if (isDuplicate): 중복된 값이 있는 경우에는 alert('이미 추가된 할 일입니다.')를 호출하여 사용자에게 알립니다. 중복된 할 일은 추가되지 않습니다.

else if (inputValue.length > 20): 입력값의 길이가 20자를 초과하는지 확인합니다. inputValue.length는 입력값의 길이를 나타냅니다. 20자를 초과하는 경우에는 alert('할 일은 20자 이하로 입력해주세요.')를 호출하여 사용자에게 알립니다. 20자 이상인 할 일은 추가되지 않습니다.

else: 중복도 없고 길이도 20자 이하인 경우, setTodos([...todos, { text: inputValue, checked: false }])를 사용하여 새로운 할 일을 todos 배열에 추가합니다. 기존의 todos 배열과 새로운 할 일 객체를 복사하여 새로운 배열을 생성합니다. 추가된 할 일 객체는 { text: inputValue, checked: false } 형식으로 구성되며, text는 입력값(inputValue)을 나타내고 checked는 체크 상태를 나타냅니다.

setInputValue(''): 할 일이 추가되면 입력 필드(inputValue)를 비웁니다. 다음 할 일을 입력하기 위해 사용자가 텍스트 필드를 다시 작성할 수 있습니다.



///////
handleDeleteTodo 함수입니다. 이 함수는 지정된 인덱스에 해당하는 할 일을 삭제하는 기능을 구현합니다. 아래는 함수의 동작과 구성 요소에 대한 설명입니다:

const updatedTodos = todos.filter((_, i) => i !== index): updatedTodos 변수를 선언하고, todos 배열을 순회하면서 삭제할 인덱스(index)와 다른 인덱스의 할 일만 필터링하여 새로운 배열을 생성합니다. filter() 함수는 todos 배열의 각 요소와 인덱스를 받아서 조건을 만족하는 요소만 반환합니다. 여기서는 i !== index 조건을 사용하여 삭제할 인덱스(index)와 다른 인덱스의 할 일만을 필터링하여 새로운 배열을 생성합니다.

setTodos(updatedTodos): setTodos() 함수를 사용하여 todos 배열을 updatedTodos로 업데이트합니다. 이렇게 하면 삭제된 할 일이 제거된 새로운 할 일 목록이 반영됩니다.

즉, 위의 코드는 삭제할 인덱스를 기준으로 할 일을 필터링하여 새로운 배열을 생성하고, 이를 setTodos()를 통해 업데이트하여 삭제된 할 일이 반영되도록 하는 함수입니다.

///////

handleToggleTodo 함수입니다. 이 함수는 지정된 인덱스에 해당하는 할 일의 체크 상태를 변경하는 기능을 구현합니다. 아래는 함수의 동작과 구성 요소에 대한 설명입니다:

const updatedTodos = todos.map((todo, i) => { ... }): updatedTodos 변수를 선언하고, todos 배열을 순회하면서 각 할 일을 새로운 배열로 매핑합니다. map() 함수는 todos 배열의 각 요소에 대해 지정된 콜백 함수를 호출하고, 그 결과로 새로운 배열을 생성합니다.

if (i === index) { return { ...todo, checked: !todo.checked }; }: 현재 순회 중인 할 일의 인덱스(i)가 지정된 인덱스(index)와 일치하는 경우, 할 일 객체의 checked 속성을 반전시킵니다. 할 일 객체를 복사하기 위해 전개 연산자({...todo})를 사용하고, checked 속성을 !todo.checked로 설정하여 체크 상태를 반전시킵니다.

return todo;: 인덱스가 일치하지 않는 경우에는 기존의 할 일 객체를 그대로 반환합니다.

setTodos(updatedTodos): setTodos() 함수를 사용하여 todos 배열을 updatedTodos로 업데이트합니다. 이렇게 하면 체크 상태가 변경된 할 일 목록이 반영됩니다.

즉, 위의 코드는 지정된 인덱스에 해당하는 할 일의 체크 상태를 반전시켜 업데이트하는 기능을 구현하는 함수입니다. map() 함수를 사용하여 새로운 배열을 생성하고, 해당 인덱스의 할 일 객체의 체크 상태를 변경하여 업데이트합니다.